@page "/add-order"
@inject McERPSystem.Services.Orders.IOrderService OrderService
@inject McERPSystem.Services.Clients.IClientService ClientService
@inject McERPSystem.Services.Inventory.IArticleService ArticleService
@using McERPSystem.Services.Models;

<h3>Add New Order</h3>

<EditForm Model="@order" OnValidSubmit="SaveOrder">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Client</label>
        <InputSelect @bind-Value="order.ClientId" class="form-control">
            <option value="">Select Client</option>
            @foreach (var client in clients)
            {
                <option value="@client.Id">@client.FirstName @client.LastName</option>
            }
        </InputSelect>
    </div>

    <div>
        <h5>Order Items</h5>
        @foreach (var item in order.OrderItems)
        {
            <div>
                <label>Article</label>
                <InputSelect @bind-Value="item.ArticleId">
                    @foreach (var article in articles)
                    {
                        <option value="@article.Id">@article.Name</option>
                    }
                </InputSelect>

                <label>Quantity</label>
                <InputNumber @bind-Value="item.Quantity" />

                <label>Price</label>
                <InputNumber @bind-Value="item.Price" />
            </div>
        }
        <button type="button" @onclick="AddOrderItem">Add Item</button>
    </div>

    <button type="submit" class="btn btn-primary">Save Order</button>
</EditForm>

<p>@message</p>

@code {
    private Order order = new Order();
    private List<Client> clients = new List<Client>();
    private List<Article> articles = new List<Article>();
    private string message;

    protected override async Task OnInitializedAsync()
    {
        clients = await ClientService.GetAllClientsAsync();
        articles = await ArticleService.GetAllArticlesAsync();
    }

    private void AddOrderItem()
    {
        order.OrderItems.Add(new OrderItem());
    }

    private async Task SaveOrder()
    {
        try
        {
            await OrderService.AddOrderAsync(order);
            message = "Order saved successfully!";
            order = new Order(); // Reset the form
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }
}

